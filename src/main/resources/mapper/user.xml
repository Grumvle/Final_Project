<?xml version="1.0" encoding="UTF-8"?>

<!--
	DTD(Document Type Definition)
	- 작성한 문서가 어떤 문서인지에 대해서 정의해 놓은 것.
    - 하나의 시스템 내에서 사용할 XML 데이터의 구조를 정의하여
            유효성을 점검 시 사용하는 태그.
 -->

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 명은 패키지명을 포함해서 DAO 인터페이스 이름으로
          작성하는 것이 관례임.
     namespace 명은 mapper 들을 구분하는데 식별자로 사용이 됨.
-->

<mapper namespace="UserDao">

    <!--UserID로 한명의 값-->
    <select id="contOne" parameterType="String" resultType="UserDTO">
        select * from final.user where user_id = #{value}
    </select>

    <select id="eqId" parameterType="String" resultType="String">
        select user_id from final.user where user_id = #{value}
    </select>

    <!--User 추가-->
    <insert id="add" parameterType="UserDto">
        <selectKey resultType="int" keyProperty="user_no" order="BEFORE">
            select max(user_no) from user
        </selectKey>
        INSERT INTO final.user(user_no,user_id,user_pwd,user_name,user_nickname,user_email,user_phone,user_birth,user_approve,user_money,category_no,category_no2,user_img,user_job,user_intro,user_addr)
        VALUES (#{user_no}+1, #{user_id}, #{user_pwd}, #{user_name}, #{user_nickname}, #{user_email}, #{user_phone}, now(), '0', 0, #{category_no}, #{category_no2},#{user_img}, #{user_job}, #{user_intro}, #{user_addr})
    </insert>

    <!--User List-->
    <select id="contAll" resultType="UserDTO">
        select b.* , c.category as category_name1, c1.category as category_name2 from user b join category c on b.category_no = c.category_no join category c1 on b.category_no2 = c1.category_no
    </select>

    <!--총 User 수-->
    <select id="contAllCount" resultType="int">
        select count(*) from final.user
    </select>


    <update id="minuspayment" parameterType="Map">
        update final.user set user_money = user_money - #{bp} where user_no = #{user_no}
    </update>


    <update id="modi" parameterType="UserDto">
        update final.user set user_id = #{user_id}, user_pwd = #{user_pwd}, user_nickname=#{user_nickname}, user_email=#{user_email},
        user_phone=#{user_phone}, user_birth=now(),category_no = #{category_no},
        category_no2=#{category_no2}, user_img = #{user_img}, user_job=#{user_job}, user_intro=#{user_intro}, user_addr=#{user_addr}
        where user_no = #{user_no}
    </update>

    <update id="mod_pwd" parameterType="UserDto">
        update final.user set user_pwd = #{user_pwd} where user_id = #{user_id}
    </update>
    
    <delete id="delete" parameterType="int">
        delete from user where user_no = #{no}
    </delete>

    <update id="seq" parameterType="int">
			update final.user set user_no = user_no - 1
				where user_no > #{no}
    </update>


    <update id="pluspayment" parameterType="Map">
        update final.user set user_money = user_money + #{money} where user_no = #{user_no}
    </update>


    <select id="findByUserNo" parameterType="int" resultType="UserDTO">
        select * from final.user where user_no = #{value}
    </select>


    <select id="totalsession" resultType="int">
        SELECT COUNT(*)
        FROM
        (SELECT (id - @prev) as diff, time - @prev_time as time_diff, @prev := id, @prev_time := time
        FROM information_schema.processlist,
        (SELECT @prev := 0, @prev_time := 0) v
        WHERE db = 'final'
        ORDER BY id) t
        WHERE diff = 1 or time_diff = 0 or time_diff = 1
    </select>




</mapper>